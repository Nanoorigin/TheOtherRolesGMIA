# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

[*.cs]
indent_style = space
indent_size = 4
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

dotnet_diagnostic.IDE0051.severity = silent
dotnet_diagnostic.IDE0052.severity = silent
dotnet_diagnostic.IDE1006.severity = silent

# usingをディレクティブごとにスペースで分けるか
dotnet_separate_import_directive_groups = false
# usingの先頭をSystemに並び変えるか
dotnet_sort_system_directives_first = true
# usingをどこに配置するか
csharp_using_directive_placement = outside_namespace:suggestion

# this.とMe.強制するか
dotnet_style_qualification_for_event = false:silent
dotnet_style_qualification_for_field = false:silent
dotnet_style_qualification_for_method = false:silent
dotnet_style_qualification_for_property = false:silent

# 型参照のためのフレームワーク型名の代わりに言語キーワードを使用するか
dotnet_style_predefined_type_for_locals_parameters_members = true:silent
dotnet_style_predefined_type_for_member_access = true:silent

# 二幸演算子の括弧の設定
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:suggestion
# その他の演算子の括弧の設定
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion

# アクセス修飾子の設定
dotnet_style_require_accessibility_modifiers = for_non_interface_members:silent

# 結合式を使用する
dotnet_style_coalesce_expression = true:suggestion
# コレクション初期化子を使用する
dotnet_style_collection_initializer = true:suggestion
# 明示的に提供されたタプル名を使用する
dotnet_style_explicit_tuple_names = true:suggestion
# null 値の反映を使用する
dotnet_style_null_propagation = true:silent
# 可能であれば、null 条件演算子を使用する
dotnet_style_object_initializer = true:warning
# 折り返し時の演算子の位置
dotnet_style_operator_placement_when_wrapping = beginning_of_line
# 複合代入を使用する
dotnet_style_prefer_compound_assignment = true:suggestion
# 代入に条件式を使用する
dotnet_style_prefer_conditional_expression_over_assignment = true:slient
# 戻り値に条件式を使用する
dotnet_style_prefer_conditional_expression_over_return = true:silent
# 推論された匿名型のメンバー名を優先する
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
# 推論されたタプル要素名を優先する
dotnet_style_prefer_inferred_tuple_names = true:suggestion
# 参照の等価性メソッドよりもnull検査を優先する
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
# 簡略化した条件式を使用する
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
# 補間文字列を簡略化する
dotnet_style_prefer_simplified_interpolation = true:suggestion

# 読み取り専用修飾子を追加する
dotnet_style_readonly_field = true:silent

# 使用されていないパラメーターを削除する
dotnet_code_quality_unused_parameters = all:silent
# 不要な値の代入を削除する
csharp_style_unused_value_assignment_preference = true:silent

# 不要な抑制を削除する
dotnet_remove_unnecessary_suppression_exclusions = none

# new式を簡略化する
csharp_style_implicit_object_creation_when_type_is_apparent = true:warning

# varを使わず明示的に型を指定するか
csharp_style_var_elsewhere = false:silent
csharp_style_var_for_built_in_types = false:silent
csharp_style_var_when_type_is_apparent = false:silent

# パターンマッチング設定
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_pattern_matching = true:suggestion
csharp_style_prefer_switch_expression = true:suggestion

# nullチェックの実行時ではなく、ラムダ式を呼び出すときに、条件付き合体演算子 (?.) を使用する
csharp_style_conditional_delegate_call = true:suggestion

# ローカル関数をstaticでマークする
csharp_prefer_static_local_function = true:suggestion

# コードが1行であっても中かっこを使用するか
csharp_prefer_braces = false:suggestion
# 単純なusingステートメントを使用するか
csharp_prefer_simple_using_statement = true:suggestion

# 式レベルの設定
csharp_prefer_simple_default_expression = true:suggestion
# 分解された変数宣言を優先するか
csharp_style_deconstructed_variable_declaration = true:suggestion
# 可能であれば、メソッド呼び出しの引数リスト内で out 変数をインラインで宣言しするか
csharp_style_inlined_variable_declaration = true:suggestion
# 匿名関数よりローカル関数を優先するか
csharp_style_pattern_local_over_anonymous_function = true:suggestion
# コレクションの末尾からのインデックスを計算するときに、^ 演算子を使用するか
csharp_style_prefer_index_operator = true:suggestion
# コレクションの "スライス" を抽出するときに、範囲演算子 .. を使用するか
csharp_style_prefer_range_operator = true:suggestion
# throw ステートメントの代わりに throw 式を使用します
csharp_style_throw_expression = true:suggestion
[*.cs]
#### 命名样式 ####

# 命名规则

dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# 符号规范

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers = 

# 命名样式

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = 
dotnet_naming_style.begins_with_i.word_separator = 
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_accessors = true:silent
csharp_style_expression_bodied_lambdas = true:silent
csharp_style_expression_bodied_local_functions = false:silent
csharp_space_around_binary_operators = before_and_after
csharp_indent_labels = one_less_than_current
csharp_style_namespace_declarations = block_scoped:silent
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_prefer_top_level_statements = true:silent
csharp_style_prefer_primary_constructors = true:suggestion
csharp_prefer_system_threading_lock = true:suggestion
csharp_prefer_static_anonymous_function = true:suggestion
csharp_style_prefer_readonly_struct = true:suggestion
csharp_style_prefer_readonly_struct_member = true:suggestion
csharp_style_allow_embedded_statements_on_same_line_experimental = true:silent
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true:silent
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true:silent
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true:silent
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true:silent
csharp_style_prefer_extended_property_pattern = true:suggestion

[*.vb]
#### 命名样式 ####

# 命名规则

dotnet_naming_rule.interface_should_be_以_i_开始.severity = suggestion
dotnet_naming_rule.interface_should_be_以_i_开始.symbols = interface
dotnet_naming_rule.interface_should_be_以_i_开始.style = 以_i_开始

dotnet_naming_rule.类型_should_be_帕斯卡拼写法.severity = suggestion
dotnet_naming_rule.类型_should_be_帕斯卡拼写法.symbols = 类型
dotnet_naming_rule.类型_should_be_帕斯卡拼写法.style = 帕斯卡拼写法

dotnet_naming_rule.非字段成员_should_be_帕斯卡拼写法.severity = suggestion
dotnet_naming_rule.非字段成员_should_be_帕斯卡拼写法.symbols = 非字段成员
dotnet_naming_rule.非字段成员_should_be_帕斯卡拼写法.style = 帕斯卡拼写法

# 符号规范

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, friend, private, protected, protected_friend, private_protected
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.类型.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.类型.applicable_accessibilities = public, friend, private, protected, protected_friend, private_protected
dotnet_naming_symbols.类型.required_modifiers = 

dotnet_naming_symbols.非字段成员.applicable_kinds = property, event, method
dotnet_naming_symbols.非字段成员.applicable_accessibilities = public, friend, private, protected, protected_friend, private_protected
dotnet_naming_symbols.非字段成员.required_modifiers = 

# 命名样式

dotnet_naming_style.以_i_开始.required_prefix = I
dotnet_naming_style.以_i_开始.required_suffix = 
dotnet_naming_style.以_i_开始.word_separator = 
dotnet_naming_style.以_i_开始.capitalization = pascal_case

dotnet_naming_style.帕斯卡拼写法.required_prefix = 
dotnet_naming_style.帕斯卡拼写法.required_suffix = 
dotnet_naming_style.帕斯卡拼写法.word_separator = 
dotnet_naming_style.帕斯卡拼写法.capitalization = pascal_case

dotnet_naming_style.帕斯卡拼写法.required_prefix = 
dotnet_naming_style.帕斯卡拼写法.required_suffix = 
dotnet_naming_style.帕斯卡拼写法.word_separator = 
dotnet_naming_style.帕斯卡拼写法.capitalization = pascal_case

[*.{cs,vb}]
end_of_line = lf
dotnet_style_qualification_for_field = false:silent
dotnet_style_qualification_for_property = false:silent
tab_width = 4
indent_size = 4
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_qualification_for_method = false:silent
dotnet_style_qualification_for_event = false:silent
dotnet_style_require_accessibility_modifiers = for_non_interface_members:silent
dotnet_code_quality_unused_parameters = all:silent
dotnet_style_readonly_field = true:silent
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion
dotnet_style_allow_multiple_blank_lines_experimental = true:silent
dotnet_style_allow_statement_immediately_after_block_experimental = true:silent
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:silent
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_object_initializer = true:warning